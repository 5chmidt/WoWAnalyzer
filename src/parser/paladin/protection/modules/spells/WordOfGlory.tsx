import React from 'react';
import SPELLS from 'common/SPELLS';
import SpellLink from 'common/SpellLink';
import { formatPercentage } from 'common/format';
import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';
import Events, { CastEvent, HealEvent, ApplyBuffEvent, RemoveBuffEvent } from 'parser/core/Events';
import { When, ThresholdStyle } from 'parser/core/ParseResults';
import { Options } from 'parser/core/Module';
import HIT_TYPES from 'game/HIT_TYPES';

const OVERHEAL_THRESHOLD = 0.75;

export default class WordOfGlory extends Analyzer {
  _sl = {
    count: 0,
    wasted: 0,
    // sotr casts w/ SL up.
    sotrs: 0,
  };

  _casts = {
    free: 0,
    payed: 0,
    // casts that overhealed by enough to be concerning
    overhealed: 0,
  };


  constructor(options: Options) {
    super(options);

    this.addEventListener(Events.cast.spell(SPELLS.WORD_OF_GLORY).by(SELECTED_PLAYER), this._cast);
    this.addEventListener(Events.cast.spell(SPELLS.SHIELD_OF_THE_RIGHTEOUS).by(SELECTED_PLAYER), this._sotrCast);
    this.addEventListener(Events.applybuff.spell(SPELLS.SHINING_LIGHT), this._slApply);
    this.addEventListener(Events.removebuff.spell(SPELLS.SHINING_LIGHT), this._slRemove);
    this.addEventListener(Events.heal.spell(SPELLS.WORD_OF_GLORY).by(SELECTED_PLAYER), this._heal);
  }

  private _heal(event: HealEvent) {
    const totalHeal = event.amount + (event.overheal || 0) + (event.absorbed || 0);

    if (event.hitType !== HIT_TYPES.CRIT && event.amount / totalHeal < OVERHEAL_THRESHOLD) {
      this._casts.overhealed += 1;
    }
  }

  private _cast(event: CastEvent) {
    if(this.selectedCombatant.hasBuff(SPELLS.SHINING_LIGHT.id)) {
      this._casts.free += 1;
      this._sl.wasted -= 1;
    } else {
      this._casts.payed += 1;
    }
  }

  private _sotrCast(event: CastEvent) {
    if(this.selectedCombatant.hasBuff(SPELLS.SHINING_LIGHT.id)) {
      this._sl.sotrs += 1;
    }
  }

  private _slApply(_event: ApplyBuffEvent) {
    this._sl.count += 1;
  }

  private _slRemove(_event: RemoveBuffEvent) {
    // always mark wasted. when a cast is free, we subtract one. the end result
    // is that if you use every SL you net 0 wasted.
    this._sl.wasted += 1;
  }

  get totalCasts() {
    return this._casts.free + this._casts.payed;
  }

  get overhealSuggestion() {
    return {
      actual: this._casts.overhealed / this.totalCasts,
      isGreaterThan: {
        minor: 0.1,
        average: 0.15,
        major: 0.2
      },
      style: ThresholdStyle.PERCENTAGE,
    };
  }

  get wastedSlSuggestion() {
    return {
      actual: this._sl.wasted,
      isGreaterThan: {
        minor: 1,
        average: 3,
        major: 4,
      },
      style: ThresholdStyle.NUMBER,
    };
  }

  get sotrSuggestion() {
    return {
      actual: this._sl.sotrs,
      isGreaterThan: {
        minor: 5,
        average: 10,
        major: 20,
      },
      style: ThresholdStyle.NUMBER,
    };
  }

  suggestions(when: When) {
    when(this.overhealSuggestion)
      .addSuggestion((suggest, actual, recommended) => suggest(<>Try to avoid casting <SpellLink id={SPELLS.WORD_OF_GLORY.id} /> when a large portion of it would overheal.</>)
        .icon(SPELLS.WORD_OF_GLORY.icon)
        .actual(`${formatPercentage(actual)}% of your casts overhealed by more than 25%`)
        .recommended(`< ${formatPercentage(recommended)}% is recommended`));

    when(this.wastedSlSuggestion)
      .addSuggestion((suggest, actual, recommended) => suggest(<>Make sure to use all of the free <SpellLink id={SPELLS.WORD_OF_GLORY.id} /> casts granted by <SpellLink id={SPELLS.SHINING_LIGHT.id} />.</>)
        .icon(SPELLS.SHINING_LIGHT.icon)
        .actual(`You let ${actual} free casts expire.`)
        .recommended(`< ${recommended}% is recommended`));

    when(this.sotrSuggestion)
      .addSuggestion((suggest, actual, recommended) => suggest(<>Avoid letting your <SpellLink id={SPELLS.SHINING_LIGHT.id} /> buffs last too long. This wastes stacks that would be generated by <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} />.</>)
        .icon(SPELLS.SHINING_LIGHT.icon)
        .actual(`You lost ${actual} stacks`)
        .recommended(`< ${recommended} is recommended`));
  }
}
